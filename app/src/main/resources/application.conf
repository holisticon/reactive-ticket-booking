booking {
	http.port = 8080
	interface = "127.0.0.1"
	interface = ${?HOSTNAME}
	cluster-name= "reactive-ticket-booking"
	netty.port = 2551
}

akka {
  loglevel = DEBUG
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
  }

  remote {
    log-remote-lifecycle-events = on
    netty.tcp {

			//bind-hostname = ${booking.interface}
			//bind-port = 2551
			hostname = ${booking.interface}
			port = ${booking.netty.port}
    }
  }


  # Absolute path to the default journal plugin configuration entry.
  persistence.journal.plugin = "akka.persistence.journal.inmem"
  # Absolute path to the default snapshot store plugin configuration entry.
  persistence.snapshot-store.plugin = "akka.persistence.snapshot-store.local"

  http {

    host-connector {
      # If this setting is enabled, the `HttpHostConnector` pipelines requests
      # across connections, otherwise only one single request can be "open"
      # on a particular HTTP connection.
      pipelining = off

      # Needed for the images from dropbox. Dropbox does several redirects.
      max-redirects = 5
    }
  }


  # Enable metrics extension in akka-cluster-metrics.
  extensions=["akka.cluster.metrics.ClusterMetricsExtension"]

  # Disable legacy metrics in akka-cluster.
  metrics.enabled=off

  cluster {

		seed-nodes = ["akka.tcp://"${booking.cluster-name}"@"${booking.interface}":2551"]

    metrics {

      collector {

        # FQCN of the metrics collector implementation.
        # It must implement `akka.cluster.metrics.MetricsCollector` and
        # have public constructor with akka.actor.ActorSystem parameter.
        # Will try to load in the following order of priority:
        # 1) configured custom collector 2) internal `SigarMetricsCollector` 3) internal `JmxMetricsCollector`
        provider = "akka.cluster.metrics.SigarMetricsCollector"
        # Try all 3 available collector providers, or else fail on the configured custom collector provider.
        fallback = false
        # How often metrics are sampled on a node.
        # Shorter interval will collect the metrics more often.
        # Also controls frequency of the metrics publication to the node system event bus.
        sample-interval = 1s
        # How often a node publishes metrics information to the other nodes in the cluster.
        # Shorter interval will publish the metrics gossip more often.
        gossip-interval = 1s
      }
    }

    //seed-nodes = [
    //  "akka.tcp://reactive-ticket-monster@127.0.0.1:10337"]

    auto-down-unreachable-after = 10s



    sharding {

      # The extension creates a top level actor with this name in top level system scope,
      # e.g. '/system/sharding'
      guardian-name = sharding

      # Specifies that entities runs on cluster nodes with a specific role.
      # If the role is not specified (or empty) all nodes in the cluster are used.
      role = ""

      # When this is set to 'on' the active entity actors will automatically be restarted
      # upon Shard restart. i.e. if the Shard is started on a different ShardRegion
      # due to rebalance or crash.
      remember-entities = off

      # If the coordinator can't store state changes it will be stopped
      # and started again after this duration, with an exponential back-off
      # of up to 5 times this duration.
      coordinator-failure-backoff = 5 s

      # The ShardRegion retries registration and shard location requests to the
      # ShardCoordinator with this interval if it does not reply.
      retry-interval = 2 s

      # Maximum number of messages that are buffered by a ShardRegion actor.
      buffer-size = 100000

      # Timeout of the shard rebalancing process.
      handoff-timeout = 60 s

      # Time given to a region to acknowledge it's hosting a shard.
      shard-start-timeout = 10 s

      # If the shard is remembering entities and can't store state changes
      # will be stopped and then started again after this duration. Any messages
      # sent to an affected entity may be lost in this process.
      shard-failure-backoff = 10 s

      # If the shard is remembering entities and an entity stops itself without
      # using passivate. The entity will be restarted after this duration or when
      # the next message for it is received, which ever occurs first.
      entity-restart-backoff = 10 s

      # Rebalance check is performed periodically with this interval.
      rebalance-interval = 10 s

      # Absolute path to the journal plugin configuration entity that is to be
      # used for the internal persistence of ClusterSharding. If not defined
      # the default journal plugin is used. Note that this is not related to
      # persistence used by the entity actors.
      journal-plugin-id = ""

      # Absolute path to the snapshot plugin configuration entity that is to be
      # used for the internal persistence of ClusterSharding. If not defined
      # the default snapshot plugin is used. Note that this is not related to
      # persistence used by the entity actors.
      snapshot-plugin-id = ""

      # The coordinator saves persistent snapshots after this number of persistent
      # events. Snapshots are used to reduce recovery times.
      snapshot-after = 1000

      # Setting for the default shard allocation strategy
      least-shard-allocation-strategy {
        # Threshold of how large the difference between most and least number of
        # allocated shards must be to begin the rebalancing.
        rebalance-threshold = 10

        # The number of ongoing rebalancing processes is limited to this number.
        max-simultaneous-rebalance = 3
      }

      # Settings for the coordinator singleton. Same layout as akka.cluster.singleton.
      coordinator-singleton = ${akka.cluster.singleton}

      # The id of the dispatcher to use for ClusterSharding actors.
      # If not specified default dispatcher is used.
      # If specified you need to define the settings of the actual dispatcher.
      # This dispatcher for the entity actors is defined by the user provided
      # Props, i.e. this dispatcher is not used for the entity actors.
      use-dispatcher = ""
    }
  }


}
